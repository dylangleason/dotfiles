#!/usr/bin/env bash

check_cmd() {
    which $1 > /dev/null 2>&1
}

check_cmd_and_fail() {
    check_cmd $1
    if [ $? -ne 0 ]; then
        echo "Could not find dependency: $1."
        exit 1
    fi
}

install_packages() {
    local check_cmd=$1
    local install_cmd=$2
    shift
    shift
    local packages=("$@")
    local selected=()
    for pkg in "${packages[@]}"; do
        printf "Checking if \"$pkg\" is installed... "
        $check_cmd $pkg
        if [ $? -eq 0 ]; then
            printf "marked for installation.\n"
            selected+=($pkg)
        else
            printf "already installed.\n"
        fi
    done
    if [ "${#selected[@]}" -gt 0 ]; then
        $install_cmd "${selected[@]}"
    fi
}

{{ if eq .chezmoi.os "linux" -}}
PACKAGES=(
    build-essential
    curl
    emacs
    emacs-common-non-dfsg
    git
    golang
    htop
    jq
    libreadline8
    libreadline-dev
    silversearcher-ag
    tmux
    tree
    zsh
)

install_cmd() {
    local packages=("$@")
    sudo apt-get install -y "${packages[@]}"
}

check_package_cmd() {
    apt-cache policy $1 | grep -i 'installed: (none)' > /dev/null 2>&1
}

install_deps() {
    check_cmd apt-get
    if [ $? -eq 1 ]; then
        echo "apt-get not found"
        exit 1
    fi
}

{{ else if eq .chezmoi.os "darwin" -}}
PACKAGES=(
    ag
    coreutils
    emacs
    git
    go
    htop
    jq
    readline
    tmux
    tree
    zsh
)

install_cmd() {
    local packages=("$@")
    brew install "${packages[@]}"
}

check_package_cmd() {
    brew info $1 | grep -i 'not installed' > /dev/null 2>&1
}

install_deps() {
    check_cmd_and_fail xcode-select
    xcode-select -p > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        xcode-select --install
    fi
    check_cmd brew
    if [ $? -ne 0 ]; then
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
}
{{ end -}}

install_oh_my_zsh_cmd() {
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    if [ -f ~/.zshrc.pre-oh-my-zsh ]; then
        rm ~/.zshrc
        mv ~/.zshrc.pre-oh-my-zsh ~/.zshrc
    fi
}

install_pyenv_cmd() {
    bash -c "$(curl -fsSL https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer)"
}

install_rbenv_cmd() {
    bash -c "$(curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-installer)"
}

check_oh_my_zsh() {
    [ ! -e ~/.oh-my-zsh ]
}

check_pyenv() {
    [ ! -e ~/.pyenv ]
}

check_rbenv() {
    [ ! -e ~/.rbenv ]
}

main() {
    printf "Checking Dependencies... "
    install_deps
    printf "Done.\n\n"

    echo "Installing OS packages"
    echo "----------------------"
    install_packages check_package_cmd install_cmd "${PACKAGES[@]}"
    echo ""

    echo "Installing Git packages"
    echo "-----------------------"
    install_packages check_pyenv install_pyenv_cmd "pyenv"
    install_packages check_rbenv install_rbenv_cmd "rbenv"
    install_packages check_oh_my_zsh install_oh_my_zsh_cmd "oh-my-zsh"
    echo ""
}

main
